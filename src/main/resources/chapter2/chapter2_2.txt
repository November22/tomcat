    一.tomcat启动
        tomcat启动过程非常标准化，统一按照生命管理接口Lifecycle的定义进行启动。首先，调用init()方法进行组件的逐级初始化，然后再调用
    start()方法进行启动，当然每次调用伴随着生命周期状态变更事件的触发。
        每一级组件除完成自身的处理外，还要负责调用子组件相应的生命周期管理方法。

    二.tomcat类加载器
        1.JVM提供的三种类加载器
            a.BootStrap：用于加载JVM提供的基础运行类，即位于%JAVA_HOME%/jre/lib目录下的核心类库。
            b.Extension：Java提供的一个标准的扩展机制用于加载除核心库外的jar包，即只要复制到指定的扩展目录（
        可以多个）下的jar，（不需要通过-classpath指定）。默认扩展目录是%JAVA_HOME%/jre/lib/ext。
            c.System：用于加载环境变量classpath指定目录下的或者-classpath运行参数指定的jar包。System类加载器
        通常用于【加载应用程序jar包及其启动类入口】（Tomcat的bootstrap类即由system类加载器加载）。

        2.Tomcat加载器
            a.应用服务器通常会自行创建类加载器以实现更灵活的控制。
                i.隔离性：Web应用类库相互隔离，避免依赖库或者应用包相互影响。
                ii.灵活性：既然Web应用之间的类加载器相互独立，那么我们就能只针对一个web应用进行重新部署，此时该Web
            应用的类加载器将会全部重建，而不会影响其他的web应用。
                iii.性能：由于每个Web应用都有一个类加载器，因此Web应用加载类时，不会搜索其他Web应用包含的Jar包，性能
            自然高于应用服务器只有一个类加载器的情况。
